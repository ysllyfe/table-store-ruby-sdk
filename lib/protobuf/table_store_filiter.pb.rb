### Generated by rprotoc. DO NOT EDIT!
### <proto file: table_store_filiter.proto>
#
# enum FilterType {
#     FT_SINGLE_COLUMN_VALUE = 1;
#     FT_COMPOSITE_COLUMN_VALUE = 2;
#     FT_COLUMN_PAGINATION = 3;
# }
#
# enum ComparatorType {
#     CT_EQUAL                    = 1;
#     CT_NOT_EQUAL                = 2;
#     CT_GREATER_THAN             = 3;
#     CT_GREATER_EQUAL            = 4;
#     CT_LESS_THAN                = 5;
#     CT_LESS_EQUAL               = 6;
# }
#
# message SingleColumnValueFilter {
#     required ComparatorType comparator     = 1;
#     required string column_name        = 2;
#     required bytes column_value        = 3; // Serialized SQLVariant
#     required bool filter_if_missing        = 4;
#     required bool latest_version_only      = 5;
# }
#
# enum LogicalOperator {
#     LO_NOT                      = 1;
#     LO_AND                      = 2;
#     LO_OR                       = 3;
# }
#
# message CompositeColumnValueFilter {
#     required LogicalOperator combinator    = 1;
#     repeated Filter sub_filters            = 2;
# }
#
# message ColumnPaginationFilter {
#     required int32 offset = 1;
#     required int32 limit = 2;
# }
#
# message Filter {
#     required FilterType type    = 1;
#     required bytes filter       = 2;  // Serialized string of filter of the type
# }

require 'protobuf/message/message'
require 'protobuf/message/enum'
require 'protobuf/message/service'
require 'protobuf/message/extend'

class FilterType < ::Protobuf::Enum
  defined_in __FILE__
  FT_SINGLE_COLUMN_VALUE = value(:FT_SINGLE_COLUMN_VALUE, 1)
  FT_COMPOSITE_COLUMN_VALUE = value(:FT_COMPOSITE_COLUMN_VALUE, 2)
  FT_COLUMN_PAGINATION = value(:FT_COLUMN_PAGINATION, 3)
end
class ComparatorType < ::Protobuf::Enum
  defined_in __FILE__
  CT_EQUAL = value(:CT_EQUAL, 1)
  CT_NOT_EQUAL = value(:CT_NOT_EQUAL, 2)
  CT_GREATER_THAN = value(:CT_GREATER_THAN, 3)
  CT_GREATER_EQUAL = value(:CT_GREATER_EQUAL, 4)
  CT_LESS_THAN = value(:CT_LESS_THAN, 5)
  CT_LESS_EQUAL = value(:CT_LESS_EQUAL, 6)
end
# message SingleColumnValueFilter {
#     required ComparatorType comparator     = 1;
#     required string column_name        = 2;
#     required bytes column_value        = 3; // Serialized SQLVariant
#     required bool filter_if_missing        = 4;
#     required bool latest_version_only      = 5;
# }
class SingleColumnValueFilter < ::Protobuf::Message
  defined_in __FILE__
  required :ComparatorType, :comparator, 1
  required :string, :column_name, 2
  required :bytes, :column_value, 3
  required :bool, :filter_if_missing, 4
  required :bool, :latest_version_only, 5
end
class LogicalOperator < ::Protobuf::Enum
  defined_in __FILE__
  LO_NOT = value(:LO_NOT, 1)
  LO_AND = value(:LO_AND, 2)
  LO_OR = value(:LO_OR, 3)
end
class CompositeColumnValueFilter < ::Protobuf::Message
  defined_in __FILE__
  required :LogicalOperator, :combinator, 1
  repeated :Filter, :sub_filters, 2
end
class ColumnPaginationFilter < ::Protobuf::Message
  defined_in __FILE__
  required :int32, :offset, 1
  required :int32, :limit, 2
end
class Filter < ::Protobuf::Message
  defined_in __FILE__
  required :FilterType, :type, 1
  required :bytes, :filter, 2
end